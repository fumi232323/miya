.. article::
   :date: 2018-09-30
   :title: Docker/Kubernetes 実践コンテナ開発入門 --- 1. Docker の基礎
   :category: docker
   :tags:
   :canonical_url: /docker/introduction-to-practice-container-development/1/
   :draft: true


================
1. Docker の基礎
================

.. contents::

1.1 Docker とは
===============
- Docker とは

  - コンテナ型仮想化技術を実現するために実行される常駐アプリケーションと、
  - それを操作するためのコマンドフロントインターフェースから成るプロダクト
  - アプリケーションのデプロイに特化
  - コンテナを中心とした開発・運用を可能とする

- 身近な例

  - 最もわかりやすいユースケースの1つは、軽量な仮装環境として検証に用いること

- 旧来型の手法: 仮想環境上に本番環境と同じ OS をセットアップ -> パッケージマネージャーを操作して必要なものを入れていく

  - => わたしの所属している案件だと、 ansible でやっている、という感じだろうか

- Docker:

  - ローカル環境で Docker のセットアップが済んでいれば、数行の構成ファイルとコマンドを1つ叩くだけで検証環境が作成できる。
  - アプリケーションやミドルウェアが既にセットアップされている状態の仮想環境 (Docker コンテナ) が手早く準備できる
  - Docker コンテナは仮想化ソフトウェアと比較して、より少ないオーバーヘッド (=> ある処理を行うために間接的にかかってしまうコスト) で動作する

    - => 仮想化ソフトウェア: わたしの所属している案件だと、 VirtualBox かな

- 操作の簡便さ、コンテナの軽量さから Docker はローカル環境での開発環境の再現に広く用いられるようになった

  - VirtualBox 上の仮想環境に Vagrant を利用して開発環境を構築する手法が流行したが (=> あ) 、 Docker を利用する手法の方が低リソース、高速に実行・破棄を繰り返せる。

- 既存の仮想マシンと比較して、 Docker は開発環境の準備だけでなく、その後の本番環境への展開や、アプリケーションプラットフォーム (=> アプリケーションが動作する環境) として機能する点で、既存の仮想マシンよりも優れている
- 既存の仮想化ソフトウェアよりも軽量に動作する
- 検証環境だけでなく、実際のアプリケーションでもコンテナが使える
- Docker は優れたポータビリティ (可搬性, 移植性) を持っている
- 開発環境と本番環境をほぼ同等に再現できる (本番 -> 開発 もできる)
- Docker を利用すると、開発・運用における様々な手間をスリムに解決できる
- Docker の苦手な部分

  - より厳格に Linux 系 OS として振る舞う仮想環境を構築したい場合は、不向き
  - FreeBSD など非 Linux の環境を動作させたい場合も実現不可
  - あくまでアプリケーションをデプロイすることに特化した箱

1.1.1 Docker の歴史
-------------------
- 2013 年春に、 Sokomon Hykes さんがオープンソース・ソフトウェアとして公開
- Fig (オーケストレーションシステム): 現在の Docker Compose
- 開発コミュニティも非常に活発
- Docker 関連のオープンソースプロダクトの開発競争も盛ん

  - コンテナオーケストレーションツール

    - Docker Swarm: Docker 社が主導
    - Kubernetes: この分野で一歩抜きん出ている
    - Apache Mesos

- 多くのクラウドプラットフォームも Docker をサポートしたマネージドサービスを投入している


1.1.2 Docker の基礎概念
-----------------------
- コンテナ型仮想化を実現するために実行される常駐アプリケーションと CLI から成り立つプロダクト
- アプリケーションのデプロイに特化
- コンテナの利用を促進するエコシステムが充実している

コンテナ型仮想化技術
^^^^^^^^^^^^^^^^^^^^
Docker はコンテナ型仮想化技術を利用している。

- コンテナ型仮想化技術自体は、 Docker 以前から存在する
- コンテナ型仮想化

  - 仮想化ソフトウェアなしに、 OS のリソースを隔離し、仮想 OS にする。この仮想 OS を「コンテナ」と呼ぶ。
  - コンテナを作り出すためのオーバーヘッドは、他の仮想化ソフトウェアと比較して少ない
  - 高速に起動・終了でき、必要なマシンリソースも少なくて済む

- ホスト OS 型の仮想化

  - OS 上にインストールした仮想化ソフトウェアを利用し、ハードウェアを演算により再現しゲスト OS を作り出す仕組み
  - コンテナ型仮想化に比べると、仕組み上オーバーヘッドが大きくなりがち
  - Oracle VirtualBox はこちらに分類される

- コンテナ型仮想化技術によってコンテナを軽量に作成、利用、破棄できるのは Docker の重要な特徴のひとつ

アプリケーションにフォーカスした Docker
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
性能面での利点を活かしつつ、アプリケーションのデプロイにフォーカスを置いている。

- 特徴:

  - ホストに左右されない実行環境 (Docker Engine による実行環境の標準化)
  - DSL (Dockerfile) によるコンテナの構成やアプリケーション配置定義

    - => またファイルか！
    - コンテナの情報をコードで管理できる
    - 再現性が保ちやすい

  - イメージのバージョン管理
  - レイヤ構造を持つイメージフォーマット (差分ビルドが可能)
  - Docker レジストリ (イメージの保管サーバーのようなもの)
  - プログラマブルな各種 API

- 一度作ったコンテナを他の環境で動かすための仕組みが整っている
- Docker 以前: アプリケーションをホスト OS 、またはゲスト OS にデプロイする

  - アプリケーションは実行環境 (OS) に強く依存してしまう

- Docker:

  - コンテナにアプリケーションと実行環境 (OS) を同梱してデプロイする
  - 実行環境ごと配布することで、依存問題の困難さを解決している
  - 環境依存がすくなくデプロイが簡単


1.1.3 Docker の考えに触れる
---------------------------
- Docker イメージをビルドする: Dockerfile やアプリケーションの実行ファイルから Docker コンテナの元となるイメージをつくること
- Docker イメージ: Docker コンテナの元となるもの
- docker image build でビルドする -> docker continer run で Docker コンテナを実行
- アプリケーションや必要なファイルを、 Docker イメージ (OS) に同梱して、コンテナとして実行していくのが Docker の基本的なスタイル

より実践的な Docker の実行
^^^^^^^^^^^^^^^^^^^^^^^^^^
pass


1.2 Docker を利用する意義
=========================
Docker を利用する意義

- 不変な実行環境による冪等性 (=> ある操作を1回行っても複数回行っても結果が同じであること) の確保
- 実行環境構築とアプリケーション構成のコード化
- 実行環境とアプリケーションの一体化によるポータビリティ性の向上
- システムを構成するアプリケーションやミドルウェアの構成管理の容易さ


1.2.1 環境差異問題からの脱却
----------------------------
- アプリケーションは常に何かに依存している
- 各サーバーにデプロイしているアプリケーション自体が同じならば、アプリケーションが依存する環境差異を限りなく排除したい

Infrastructure as Code と Immutable Infrastructure
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- Infrastructure as Code: インフラの構成管理

  - コードベースでインフラ構築を定義する考え方

    - どのようなサーバー構成にするか、インストールするライブラリ、ツール等は何かをコードベースで定義
    - Chef や Ansible といったプロビジョニングツールを使ってサーバーを構築する
    - 手作業が介する余地を減らし、コード中心にすることで、複数の同じ構成のサーバーを再現しやすくする
    - 環境差異の問題を避けるには、いつ、何度実行しても同じ結果が保証される ``冪等性`` を保つことが重要

- Immutable Infrastructure: 不変なインフラ

  - ある地点のサーバーの状態を保存し、複製可能にする考え方

    - 正しくセットアップされた状態のサーバーを常に使える
    - サーバーに変更を加えたい場合は、既存のインフラをアップデートするのではなく作り直して新しいサーバーのイメージとして保存し、複製できるようにする
    - 一度セットアップしたサーバーは二度と手を加えずに破棄するため、冪等性を気にする必要がない

- Dockerは、

  - Dockerfile によって構成を管理する
  - ホスト型が仮想マシンの OS を再現するのとは違い、コンテナ型では OS 部分の多くをホスト OS と共有する
  - 起動時間が数秒と短い
  - 起動が高速なので、インフラを新しく作り直す Immutable Infrastructure と相性が良い

アプリケーションとインフラをセットで構築する
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- 旧来の手法では、インフラの再現とアプリケーションのデプロイは完全に分離された作業だった
- Docker コンテナは、 ``OS (インフラ) とアプリケーションを同梱した箱`` のようなもの
- Docker イメージのビルドは、  ``インフラとアプリケーションをセットでビルドできること`` に他ならない
- コンテナは Docker イメージとして保存、再利用もできる
- ポータビリティが高い
- 作成した Docker イメージは、 Docker がインストールされているマシンであればどこでも実行できる
- CircleCI 2.0 では Docker を使った CI が可能


1.2.2 アプリケーションの構成管理のしやすさ
------------------------------------------
- いくつかの箱 (Docker コンテナ) を組み合わせてシステムを作る
- それぞれのコンテナの依存関係、実行順を間違えると正しく動作しないので、難しい

Docker のコンテナオーケストレーションシステム
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- Docker Compose: 複数コンテナを利用したアプリケーションの管理をしやすくするツール

  - yaml 形式の設定ファイルで実行するコンテナを定義したり、依存関係を定義して起動順を制御したりできる
  - Docker と Docker Compose を介すことで、本来複雑だったアプリケーションやミドルウェアの依存関係がコードで簡潔に管理できる

- Docker Swarm (Swarm Mode): Docker Compose を単一のサーバーだけでなく、複数のサーバーをまたいで複数のコンテナを管理できるようにしたもの

  - コンテナの増減
  - ノードのリソースを効率的に利用するためのコンテナを配置や負荷分散機能
  - ローリングアップデート (新旧のコンテナを用意して段階的にサービスインしていく仕組み)

- コンテナオーケストレーション: 複数のノードをまたいで多くのコンテナ群を管理する手法
- Kubernetes: コンテナオーケストレーションの分野でデファクトスタンダード

  - Google 社、OSS
  - Docker Swarm 以上に機能が充実、拡張性高い


1.2.3 本番環境に導入してこその Docker
-------------------------------------
- いろんなサービスで本番運用されている

  - AbemaTV
  - アメブロ
  - ポケモンGO

- 主要クラウドプラットフォームでコンテナ運用環境、マネージドサービスが整っている

  - GCP: Kubernetes を利用した Google Kubernetes Engine (GKE)
  - AWS: Amazon Elastic Container (ECS)
  - Azure: Azure Container Service

- データストアは向いていない
- 適材適所で採用していく


1.2.4 新しい開発スタイルへ
--------------------------
- アプリケーションとインフラの明確な垣根がなくなりつつある


1.3 ローカル Docker 環境を構築する
==================================
- Docker for Mac: OS X EL Caption 10, 11 以降の macOS が必要


1.3.2 Docker for Mac のインストール
-----------------------------------
- ここからインストールする

  https://store.docker.com/editions/community/docker-ce-desktop-mac

    - ログインが必要

- インストールガイド

  https://docs.docker.com/docker-for-mac/install/


1.3.3 Docker for Mac の基本設定
-------------------------------

設定画面の出し方:

- ステータスバーの Docker アイコンをクリック -> Settings... -> Preference


.. list-table:: 設定画面
  :widths: auto
  :header-rows: 1

  * - 項目
    - タブ
    - 説明

  * - Docker の自動起動
    - General -> Start docker when you log in: ON
    - OS ログイン時 Docker を起動する

  * - 自動更新のチェック
    - General -> Automatically check for updates: ON
    -

  * - ホスト OS 側のディレクトリマウント
    - File Sharing
    - - Docker コンテナにマウントを許可するホスト側のディレクトリを設定できる
      - Docker はホストとゲスト (コンテナ) 間でファイルをやり取りするためにディレクトリをマウントして共有する状態を作る

  * - 仮想ディスクサイズの設定
    - Disk
    - - Docker for Mac を実行している仮想ディスクのサイズを調整できる
      - macOS の場合、仮想ディスクのパスは、 ``~/Library/Containers/com.docker.docker/Data/vms/0/Docker.qcow2``

  * - CPU/メモリの割り当て
    - Advanced
    - ホスト OS のどれだけの CPU・メモリリソースを割り当てるか設定できる

  * - プロキシ
    - Proxies
    - Docker イメージをリモートの Docker レジストリから pull してくる際に、 HTTP/HTTPS プロキシを利用するかどうかを設定できる

  * - Docker の設定ファイル
    - Daemon -> Advanced
    - - Docker の設定ファイルを JSON 形式で設定できる
      - 設定画面にない設定値を変更したい場合はこの JSON 文字列を更新する

  * - Kubernetes の設定
    - Kubernetes
    - - 実行する Kubernetes の設定ができる
      - Enable Kubernetes をチェックすると、 Kubernetes が有効になる

- Docker EE

  - 有償
  - エンタープライズ向けのプロダクト
  - 大規模にスケールするミッションクリティカルなアプリケーションでの利用を想定している。
