.. article::
   :date: 2018-09-30
   :title: Git のメモ
   :category: git
   :tags:
   :canonical_url: /git/note/
   :draft: false


==================
Git のメモ
==================


GitとGitHubは別物
===================

Git
--------
バージョン管理システム(VCS)。時間の経過ととともに加えられる変更を記録し、特定のバージョンを呼び出したりする。

GitHub
--------
Gitで作成したリポジトリをホスティングするためのWebサービス。名前の通りGitを使うHub(拠点)になる場所。


Gitの基本
===================
`1.3 使い始める - Gitの基本 <https://git-scm.com/book/ja/v2/%E4%BD%BF%E3%81%84%E5%A7%8B%E3%82%81%E3%82%8B-Git%E3%81%AE%E5%9F%BA%E6%9C%AC>`_

- スナップショットで、差分ではない


git submodule
===================
`7.11 Git のさまざまなツール - サブモジュール <https://git-scm.com/book/ja/v2/Git-%E3%81%AE%E3%81%95%E3%81%BE%E3%81%96%E3%81%BE%E3%81%AA%E3%83%84%E3%83%BC%E3%83%AB-%E3%82%B5%E3%83%96%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB>`_

::

  サブモジュールを使うと、ある Git リポジトリを別の Git リポジトリのサブディレクトリとして扱うことができるようになります。 これで、別のリポジトリをプロジェクト内にクローンしても自分のコミットは別管理とすることができるようになります。

origin の謎が解けた
======================================
``origin`` は「リモートリポジトリの〜」という意味。

``hogehoge`` ブランチを作成すると、

1. ``hogehoge``
2. ``origin/hogehoge``

という二つのブランチができる。

1. はローカルにある自分のブランチ
2. はローカルにあるリモートと同期用のブランチ。手動で更新しない限り、最後に同期したタイミングのスナップショット状態。


master の謎が解けた
======================================
``master`` は、

- 物理的には単なるブランチに過ぎないが、
- 意味的には「本番リリース用のブランチ」、みたいなもの。
